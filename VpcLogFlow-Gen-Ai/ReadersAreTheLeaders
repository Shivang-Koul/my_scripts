STEP 1.> CREATE VPC WITH AT LEAST ANYONE GATEWAY, MORE IS BETTER. { STARSHIPNETWORKLOGS }

STEP 1A.> CREATE A VPC FLOW LOGS. 

STEP 1B.> GENERATE ATHENA INTEGRATION.

STEP 1C.> DEPLOY CLOUDFORMATION TEMPLETE WHICH IS AI GENERATED.

STEP 1D.> GO TO EC2 AND CREATE A MACHINE IN THE SAME VPC THAT YOU DEPOLOYED, UPLOAD THE SERVER.PY AND RUN THE COMMAND " SUDO PYTHON3 -V SERVER.PY -P 8080 -R "

STEP 2.> GO TO ATHENA AND CHECK FOR TABLES PREVIEW, EVERY THING ELSE IS GENERATED BY AI.

STEP 3.> CONNECT TO TABLEAU OR QUICKSIGHT OR POWERBI.

OR PASTE THE BELOW ON CLOUDSHELL PROVIDED PERMISSIONS ARE GIVEN.


aws ec2 create-vpc --cidr-block "10.0.0.0/16" --instance-tenancy "default" --tag-specifications '{"resourceType":"vpc","tags":[{"key":"Name","value":"StarShipProjectMars-vpc"}]}' 
aws ec2 create-vpc-endpoint --vpc-id "preview-vpc-1234" --service-name "com.amazonaws.ap-south-1.s3" --tag-specifications '{"resourceType":"vpc-endpoint","tags":[{"key":"Name","value":"StarShipProjectMars-vpce-s3"}]}' 
aws ec2 modify-vpc-attribute --vpc-id "preview-vpc-1234" --enable-dns-hostnames '{"value":true}' 
aws ec2 create-subnet --vpc-id "preview-vpc-1234" --cidr-block "10.0.16.0/20" --availability-zone "ap-south-1b" --tag-specifications '{"resourceType":"subnet","tags":[{"key":"Name","value":"StarShipProjectMars-subnet-public2-ap-south-1b"}]}' 
aws ec2 create-subnet --vpc-id "preview-vpc-1234" --cidr-block "10.0.0.0/20" --availability-zone "ap-south-1a" --tag-specifications '{"resourceType":"subnet","tags":[{"key":"Name","value":"StarShipProjectMars-subnet-public1-ap-south-1a"}]}' 
aws ec2 attach-internet-gateway --internet-gateway-id "preview-igw-1234" --vpc-id "preview-vpc-1234" 
aws ec2 create-internet-gateway --tag-specifications '{"resourceType":"internet-gateway","tags":[{"key":"Name","value":"StarShipProjectMars-igw"}]}' 
aws ec2 create-subnet --vpc-id "preview-vpc-1234" --cidr-block "10.0.144.0/20" --availability-zone "ap-south-1b" --tag-specifications '{"resourceType":"subnet","tags":[{"key":"Name","value":"StarShipProjectMars-subnet-private2-ap-south-1b"}]}' 
aws ec2 create-subnet --vpc-id "preview-vpc-1234" --cidr-block "10.0.128.0/20" --availability-zone "ap-south-1a" --tag-specifications '{"resourceType":"subnet","tags":[{"key":"Name","value":"StarShipProjectMars-subnet-private1-ap-south-1a"}]}' 
aws ec2 create-route --route-table-id "preview-rtb-public-0" --destination-cidr-block "0.0.0.0/0" --gateway-id "preview-igw-1234" 
aws ec2 create-route-table --vpc-id "preview-vpc-1234" --tag-specifications '{"resourceType":"route-table","tags":[{"key":"Name","value":"StarShipProjectMars-rtb-public"}]}' 
aws ec2 allocate-address --domain "vpc" --tag-specifications '{"resourceType":"elastic-ip","tags":[{"key":"Name","value":"StarShipProjectMars-eip-ap-south-1b"}]}' 
aws ec2 allocate-address --domain "vpc" --tag-specifications '{"resourceType":"elastic-ip","tags":[{"key":"Name","value":"StarShipProjectMars-eip-ap-south-1a"}]}' 
aws ec2 create-route-table --vpc-id "preview-vpc-1234" --tag-specifications '{"resourceType":"route-table","tags":[{"key":"Name","value":"StarShipProjectMars-rtb-private1-ap-south-1a"}]}' 
aws ec2 create-nat-gateway --subnet-id "preview-subnet-public-1" --allocation-id "preview-eipalloc-1" --tag-specifications '{"resourceType":"natgateway","tags":[{"key":"Name","value":"StarShipProjectMars-nat-public2-ap-south-1b"}]}' 
aws ec2 create-nat-gateway --subnet-id "preview-subnet-public-0" --allocation-id "preview-eipalloc-0" --tag-specifications '{"resourceType":"natgateway","tags":[{"key":"Name","value":"StarShipProjectMars-nat-public1-ap-south-1a"}]}' 
aws ec2 create-route --route-table-id "preview-rtb-private-2" --destination-cidr-block "0.0.0.0/0" --nat-gateway-id "preview-nat-1" 
aws ec2 create-route-table --vpc-id "preview-vpc-1234" --tag-specifications '{"resourceType":"route-table","tags":[{"key":"Name","value":"StarShipProjectMars-rtb-private2-ap-south-1b"}]}' 
aws ec2 create-route --route-table-id "preview-rtb-private-1" --destination-cidr-block "0.0.0.0/0" --nat-gateway-id "preview-nat-0" 
aws ec2 modify-vpc-endpoint --vpc-endpoint-id "preview-vpce-1234" --add-route-table-ids "preview-rtb-private-1" "preview-rtb-private-2"
aws ec2 create-flow-logs --resource-ids "vpc-062ad9d2e07758c73" --resource-type "VPC" --traffic-type "ALL" --log-format "${account-id} ${action} ${az-id} ${bytes} ${dstaddr} ${dstport} ${end} ${flow-direction} ${instance-id} ${interface-id} ${log-status} ${packets} ${pkt-dst-aws-service} ${pkt-dstaddr} ${pkt-src-aws-service} ${pkt-srcaddr} ${protocol} ${region} ${reject-reason} ${srcaddr} ${srcport} ${start} ${sublocation-id} ${sublocation-type} ${subnet-id} ${tcp-flags} ${traffic-path} ${type} ${version} ${vpc-id}" --log-destination-type "s3" --log-destination "arn:aws:s3:::clouderarepository" --tag-specifications '{"resourceType":"vpc-flow-log","tags":[{"key":"Name","value":"StarShipNetworkLogs"}]}' --max-aggregation-interval "600" --destination-options '{"FileFormat":"plain-text","HiveCompatiblePartitions":true,"PerHourPartition":false}' 
aws ec2 create-security-group --group-name "StarShipNetworkLogs" --description "StarShipNetworkLogs" --vpc-id "vpc-062ad9d2e07758c73" 
aws ec2 authorize-security-group-ingress --group-id "sg-preview-1" --ip-permissions '{"IpProtocol":"tcp","FromPort":22,"ToPort":22,"IpRanges":[{"CidrIp":"0.0.0.0/0"}]}' 
aws ec2 run-instances --image-id "ami-0f918f7e67a3323f0" --instance-type "t2.small" --key-name "security" --block-device-mappings '{"DeviceName":"/dev/sda1","Ebs":{"Encrypted":false,"DeleteOnTermination":true,"Iops":3000,"SnapshotId":"snap-0b1af51ad230bdf5e","VolumeSize":8,"VolumeType":"gp3","Throughput":125}}' --network-interfaces '{"SubnetId":"subnet-03e34774863dc42f6","AssociatePublicIpAddress":false,"DeviceIndex":0,"Groups":["sg-preview-1"]}' --credit-specification '{"CpuCredits":"standard"}' --tag-specifications '{"ResourceType":"instance","Tags":[{"Key":"Name","Value":"ServerToPushlogs"}]}' --metadata-options '{"HttpEndpoint":"enabled","HttpPutResponseHopLimit":2,"HttpTokens":"required"}' --private-dns-name-options '{"HostnameType":"ip-name","EnableResourceNameDnsARecord":false,"EnableResourceNameDnsAAAARecord":false}' --count "1" 





https://aws-experience.com/amer/smb/events/series/serverless-gen-ai/?sc_icampaign=aware_genai-webinar-series-lambda-2025&sc_ichannel=ha&sc_icontent=awssm-2502900_aware&sc_iplace=console-home&trk=7647d283-cc91-419d-b211-921285156901~ha_awssm-2502900_aware 

## StarShip-MissionMars Project: Data Engineer UseCase

A network engineer is embedded within the StarShip-MissionMars Project, an advanced interplanetary initiative focused on establishing a sustainable human presence on Mars. This role is critical in overseeing the network infrastructure that forms the backbone of communication between Earth Mission Control and the Mars-bound StarShip spacecraft.

### Key Responsibilities

- Managing and maintaining a secure, robust, and high-latency-tolerant network that spans from Earth to Mars.
- Ensuring continuous, reliable data exchange and command transmission between ground control and StarShip during its multi-month journey through interplanetary space.
- Monitoring communication systems for performance, stability, and security.

### Challenge Encountered

Recently, the network engineer discovered a significant issue: a reduction in data transfer speed and overall communication reliability between Mission Control and the StarShip on its way to Mars. This bottleneck threatens time-critical telemetry, scientific payload data, and real-time command executionâ€”all essential for mission success.

### Immediate Objective

To resolve the issue, the engineer must:

- Analyze the deep-space network traffic traversing the Earth-Mars communication relay.
- Identify bottlenecks, packet loss, or unexpected delays within the signal routing chain.
- Detect possible misconfigurations or anomalous behavior in software-defined interplanetary communication protocols.

### Action Plan

- Utilize advanced network monitoring and diagnostics tools tailored for high-latency, space-grade environments.
- Conduct packet-level inspections to trace the source of bottlenecks or data corruption.
- Collaborate with both terrestrial NOC teams and StarShip's onboard systems specialists to synchronize troubleshooting efforts.
- Implement fixes or reroute traffic as needed, ensuring the uninterrupted flow of mission-critical data essential to the success of the StarShip-MissionMars Project.

This real-world scenario highlights the technical challenges and responsibilities undertaken by network engineers in ambitious interplanetary missions like StarShip-MissionMars.