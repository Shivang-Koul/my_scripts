===============++++**Deployment Script: RHEL 8 EC2 Instance Setup for Cloudera Manager**++++===================
Login in AWS & Create VPC and NAT , all these machine under one security group (LAN connection)
Launch redhat 8 ec2 instance
image: ami-0619404f9180a28b3
Machine - C4 , C5 and M5 category (c5n xlarge,m5a xlarge,c5.4xlarge,)
EBS Root volume size = 80Gb



================**Step 1: Kernel Tuning and Prerequisites (All Hosts)**=============
NOTE - Do the all Prequisite steps (Kernel Tuning) and send the usefullscript.sh file on ec2 machine
Smoke_Test ****Run to see if the PreRequisites are done:

sudo wget https://s3.amazonaws.com/cloud-age/MIT_kerberos/prerequisite/check-pre-req.sh
sudo sh check-pre-req.sh


==============**Change the Swappiness**======================
sudo sysctl -a | grep vm.swappiness
sudo su -c ’cat >>/etc/sysctl.conf <<EOL
’vm.swappiness=1’
EOL’
sudo sysctl -p


==================**THCP**=================
echo "echo never > /sys/kernel/mm/transparent_hugepage/defrag" | sudo tee -a /etc/rc.d/rc.local
echo "echo never > /sys/kernel/mm/transparent_hugepage/enabled" | sudo tee -a /etc/rc.d/rc.local

sudo chmod +x /etc/rc.d/rc.local

cat /sys/kernel/mm/transparent_hugepage/enabled
cat /sys/kernel/mm/transparent_hugepage/defrag

#echo never > /sys/kernel/mm/transparent_hugepage/defrag
#echo never > /sys/kernel/mm/transparent_hugepage/enabled


===========**Disable Se-Linux**==================
sestatus
echo "SELINUX=disabled" | sudo tee /etc/selinux/config
sestatus


===============**Passwordless Login**====================
sudo su -c "touch /home/ec2-user/.ssh/config
echo -e ’Host *\n StrictHostKeyChecking no\n UserKnownHostsFile=/dev/null’ >> /home/ec2-user/.ssh/config"
echo -e ’y\n’| ssh-keygen -t rsa -P "" -f $HOME/.ssh/id_rsa
cat authorized_keys

cat $HOME/.ssh/id_rsa.pub >> $HOME/.ssh/authorized_keys
sudo systemctl restart sshd.service (exit)
ssh localhost
exit


***************Image created with kernal tunning and stored at AMI & Make the image and launch 6 more machines****************


==================**Step 2:Install and Configure MySQL or AWS RDS**===================
wget https://dev.mysql.com/get/mysql80-community-release-el8-8.noarch.rpm
sudo rpm -ivh mysql80-community-release-el8-8.noarch.rpm
sudo yum install mysql-devel -y
sudo yum install --nogpgcheck mysql-server -y
sudo systemctl start mysqld
sudo mysql_secure_installation                              #Provide password like (Cloudage@123)

Set root password? [Y/n] Y [ Password like (Cloudage@123) ]
New password: Cloudage@123
Re-enter new password: Cloudage@123
Remove anonymous users? [Y/n] Y
Disallow root login remotely? [Y/n] N
Remove test database and access to it [Y/n] Y
Reload privilege tables now? [Y/n] Y
mysqladmin -u root -p version                               #MySql Version

==================**Create SCM Database**==============
mysql -u root -p

CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
CREATE USER 'scm'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON scm.* TO 'scm'@'%';

SHOW DATABASES;

CREATE DATABASE hive DEFAULT CHARACTER SET utf8;
CREATE USER 'hive'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON hive.* TO 'hive'@'%';

CREATE DATABASE hue DEFAULT CHARACTER SET utf8;
CREATE USER 'hue'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON hue.* TO 'hue'@'%';

CREATE DATABASE rman DEFAULT CHARACTER SET utf8;
CREATE USER 'rman'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON rman.* TO 'rman'@'%';

CREATE DATABASE oozie DEFAULT CHARACTER SET utf8;
CREATE USER 'oozie'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON oozie.* TO 'oozie'@'%';

CREATE DATABASE navs DEFAULT CHARACTER SET utf8;
CREATE USER 'navs'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON navs.* TO 'navs'@'%';

CREATE DATABASE navms DEFAULT CHARACTER SET utf8;
CREATE USER 'navms'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON navms.* TO 'navms'@'%';

CREATE DATABASE actmo DEFAULT CHARACTER SET utf8;
CREATE USER 'actmo'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON actmo.* TO 'actmo'@'%';

CREATE DATABASE ranger DEFAULT CHARACTER SET utf8;
CREATE USER 'ranger'@'%' IDENTIFIED BY 'P@ssw0rd';
GRANT ALL ON ranger.* TO 'ranger'@'%';

CREATE USER 'temp'@'%' IDENTIFIED BY 'P@ssw0rd';

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'temp'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
SHOW DATABASES;

======================**Install MySQL JDBC connector**======================
sudo wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.27.tar.gz
sudo tar -zxvf mysql-connector-java-8.0.27.tar.gz
sudo mkdir -p /usr/share/java
sudo cp mysql-connector-java-8.0.27/mysql-connector-java-8.0.27.jar /usr/share/java/mysql-connector-java.jar
rm -rf mysql-connector-java-8.0.27*

# Allow remote connections
sudo sed -i 's/^bind-address.*/bind-address=0.0.0.0/' /etc/my.cnf.d/mysql-server.cnfsudo systemctl restart mysqld


=================**All host access shell script like dsh**=============
Send pem key to the main host using pscp or scp
scp -i cloudera.pem cloudera.pem ec2-user@ipaddress:/home/ec2-user
chmod 400 cloudera.pem
sudo vi cluster

# Put all ip in clutser file (from ec2 istances)

sudo vi clustercmd.sh

#Auto for all the machines

for i in ‘cat cluster‘; do
ssh -t -i ./cloudera.pem ec2-user@$i $*                                     #change the keyname(cloudage.pem)
done
:wq!


=============**Step 3: Install JDBC Connector (All Other Hosts)(Cloudera Metrix Data)**============
sh clustercmd.sh uptime --pretty
sh clustercmd.sh wget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.27.tar.gz
sh clustercmd.sh tar -zxvf mysql-connector-java-8.0.27.tar.gz
sh clustercmd.sh sudo mkdir -p /usr/share/java/
sh clustercmd.sh cd mysql-connector-java-8.0.27
sh clustercmd.sh sudo cp /home/ec2-user/mysql-connector-java-8.0.27/mysql-connector-java-8.0.27.jar /usr/share/java/mysql-connector-java.jar

==============**Install Python and Dependencies**=================
# Install Python and MySQL development libraries
sh clustercmd.sh sudo yum install python38-devel mysql-devel gcc -y
sh clustercmd.sh sudo yum install redhat-rpm-config -y
sh clustercmd.sh sudo dnf install -y python3-pip
sh clustercmd.sh python3.8 -V

# Install MySQL client for Python
sh clustercmd.sh sudo pip3.8 install mysqlclient
sh clustercmd.sh pip3.8 --version

================**Step 4: Set Up Webserver and Download Tarballs (webserver-host)**==============
Launch windows machine & take c4xlarge and 80gb with same sg
Setup The CM7 Or CDH7 Local Repository (On Webserver)

++++++++++++++++**Download the repo from the link** ++++++++++++++++++++
CDH & CM (cm7.4.4 & cdh7.1.7) -https://drive.google.com/file/d/1byPILDJVdPerEnouZSi5rGigGYY7y55h/view

*********************Download tarball above or below both are differnt version*********************
#cm7.1.3 - https://drive.google.com/file/d/1g39MsKlo9rqp9siM6g66oi2adrdmUEvi/view
#cdh7 - https://drive.google.com/file/d/1SPp6CWFhsQ-0N233AAXHlCROGUppegto/view
Please send only the cm7 and cdh7 on your instance.
[Linux] scp -i key.pem cm7 cdh7 centos@ip:/home/ec2-user/


sudo yum install httpd -y
sudo systemctl enable httpd
sudo systemctl start httpd
sudo mkdir -p /var/www/html/cloudera-repos/
tar -xvf cm7 & cdh7

#Check name as per tarball untar it
sudo mv cm7 cdh7 /var/www/html/cloudera-repos/
Check on website http://ipaddress
permissive

#Either it not accessing website then check SeLinux to make

chown -R apache:apache /var/www/html/cloudera-repos
chmod -R 755 /var/www/html/cloudera-repos
restorecon -R /var/www/html/cloudera-repos
sudo setenforce 0                                               #To check this (Current mode: permissive)

++++++++++++++++++++++++****Iftop alternative command***+++++++++++++++++++++++++++++++++++++
sudo yum install libpcap-devel ncurses-devel -y
sudo yum install epel-release -y
sudo yum install iftop -y

sudo iftop                #To check package downloading ip and details


================**Step 5: Install Cloudera Manager (webserver-host)**===============
sudo vi /etc/yum.repos.d/cloudera-manager.repo

[cloudera-manager]
# Packages for Cloudera Manager, Version 5, on RedHat or CentOS 7 x86_64
name=Cloudera Manager
baseurl=https://archive.cloudera.com/cm7/7.4.4/redhat8/yum/
gpgkey =https://archive.cloudera.com/cm7/7.4.4/redhat8/yum/RPM-GPG-KEY-cloudera
gpgcheck = 0

:wq!

#(Provide FQDN Ip of webserver hosted - own tarball download)

# Clean and refresh YUM cache
sudo yum clean all
sudo yum makecache
sudo yum repolist


===============**Either Open jdk or Oracle jdk**===============
# Enterprise JDK required Oracle account then download
visit website - https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html
The downloaded RPM will be named as jdk-11_linux-x64_bin.rpm
sudo rpm -ivh jdk-11_linux-x64_bin.rpm

+++++++++Above or below as per your choice**++++++++++
# Open source JDK
sudo yum install java-1.8.0-openjdk-devel -y


=========**Install Cloudera Manager**=======
sudo yum install cloudera-manager-server cloudera-manager-daemons -y
echo "ssl = 0" | sudo tee -a /etc/my.cnf.d/mysql-server.cnf
sudo systemctl restart mysqld
sudo /opt/cloudera/cm/schema/scm_prepare_database.sh mysql -h 172.31.11.218 scm scm P@ssw0rd          #Provide database ip or endpoint of rds
sudo service cloudera-scm-server startsudo service cloudera-scm-server status


=======**Step 6: Configure Cloudera Manager via WebUI**======
Open a browser and navigate to http://webserver-host:7180
UserName - admin
Password - admin

Assign Roles:
NameNode: webserver-host
ResourceManager: webserver-host
DataNodes: worker1, worker2, worker3
NodeManagers: worker1, worker2, worker3
Hive Metastore/Server: webserver-host
Hue Server: webserver-host
Oozie Server: webserver-host






Install AWS CLI via Official AWS Installer
# 1. Download the installer
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

# 2. Unzip it
unzip awscliv2.zip

# 3. Run the installer
sudo ./aws/install

# 4. Verify the installation
aws --version


